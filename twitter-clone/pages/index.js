import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useEffect, useState } from 'react'
import { Client, Databases, Account } from "appwrite"

export default function Home({ tweets }) {
  console.log(tweets)

  const [user, setUser] = useState(null)

  useEffect(() => {
    const client = new Client()
    const account = new Account(client)

    client
      .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)
      .setProject(process.env.NEXT_PUBLIC_PROJECT)

    const promise = account.get()
    promise.then(function (response) {
      console.log(response)
      setUser(response.$id)
    }, function (error) {
      console.log(error)
    })
  }, [])

  const createUser = async () => {
    const client = new Client()
    const account = new Account(client)

    client
      .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)
      .setProject(process.env.NEXT_PUBLIC_PROJECT)

    const response = account.create(
      'username', 'adi@gmail.com', 'password')

    response.then(function (response) {
      console.log(response)
    }, function (error) {
      console.log(error)
    })

  }

  const userLogin = async () => {
    const client = new Client()
    const account = new Account(client)

    client
      .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)
      .setProject(process.env.NEXT_PUBLIC_PROJECT)

    const response = account.createEmailSession('adi@gmail.com', 'password')

    response.then(function (response) {
      console.log(response)
      setUser(response.userId)
    }, function (error) {
      console.log(error)
    })

  }

  const logoutSessions = async () => {
    const client = new Client()
    const account = new Account(client)

    client
      .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)
      .setProject(process.env.NEXT_PUBLIC_PROJECT)

    const response = account.deleteSessions()

    response.then(function (response) {
      console.log(response)
      setUser("")

    }, function (error) {
      console.log(error)
    })
  }

  const createTweet = async () => {
    const client = new Client()
    const databases = new Databases(client)

    client
      .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)
      .setProject(process.env.NEXT_PUBLIC_PROJECT)

    const response = databases.createDocument(
      process.env.NEXT_PUBLIC_DATABASE,
      process.env.NEXT_PUBLIC_TWEETS_COLLECTION,
      "uniqueID",
      {
        text: "Hello World",
      }

    )

    response.then(function (response) {
      console.log(response)
      setUser("")

    }, function (error) {
      console.log(error)
    })

  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div style={{ padding: 30 }}>
          <button onClick={createUser}>Create User</button>
          <button onClick={userLogin}>User Login</button>
          <br />
          <button onClick={createTweet}>Create Tweet</button>
          <br />
           {user && <div>Hello {user}</div>}
          <br />
          <button onClick={logoutSessions}>Logout</button>

          <div>
            <h2>Tweets</h2>
            {tweets.documents.map((tweet) => (
              <div key={tweet.$id}>
                <h3>{tweet.text}</h3>
                <p>{tweet.createdAt}</p>
              </div>
            ))}
          </div>
        </div>

      </main>
    </>
  )
}

export async function getServerSideProps(context) {
  const client = new Client()

  client
    .setEndpoint(process.env.NEXT_PUBLIC_ENDPOINT)
    .setProject(process.env.NEXT_PUBLIC_PROJECT)

  const databases = new Databases(client)

  const tweets = await databases.listDocuments(
    process.env.NEXT_PUBLIC_DATABASE,
    process.env.NEXT_PUBLIC_TWEETS_COLLECTION
  )

  return {
    props: { tweets },
  }
}